datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model PhysicalChar {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  height     Int?
  weight     Int?
  color      String?  @db.VarChar(255)
  uniqueChar String?  @db.VarChar(255)
  createdAt  DateTime @default(now())
  pet        Pets     @relation(fields: [physicalId], references: [id], onDelete: Cascade)
  physicalId String   @unique @db.Uuid
}

model HealthInfo {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  allergies       String?   @db.VarChar(255)
  medication      String?   @db.VarChar(255)
  vaccinations    String?   @db.VarChar(255)
  chronicIssues   String?   @db.VarChar(255)
  routineCheckup  DateTime?
  exerciseRoutine String?   @db.VarChar(255)
  createdAt       DateTime  @default(now())
  pet             Pets      @relation(fields: [healthId], references: [id], onDelete: Cascade)
  healthId        String    @unique @db.Uuid
}

model Diet {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  foodType    String?  @db.VarChar(255)
  supplements String?  @db.VarChar(255)
  freqPerDay  String?  @db.VarChar(255)
  freqPerWeek String?  @db.VarChar(255)
  createdAt   DateTime @default(now())
  pet         Pets     @relation(fields: [dietId], references: [id], onDelete: Cascade)
  dietId      String   @unique @db.Uuid
}

model GrommingInfo {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  schedule      String?  @db.VarChar(255)
  coatType      String?  @db.VarChar(255)
  skinCondition String?  @db.VarChar(255)
  createdAt     DateTime @default(now())
  pet           Pets     @relation(fields: [groomingId], references: [id], onDelete: Cascade)
  groomingId    String   @unique @db.Uuid
}

model Notes {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  note      String?  @db.VarChar(255)
  createdAt DateTime @default(now())
  pet       Pets     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  noteId    String   @db.Uuid
}

model Vets {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  vetName          String             @unique @db.VarChar(255)
  address          String?            @db.VarChar(255)
  appointments     String?            @db.VarChar(255)
  specialNotes     String?            @db.VarChar(255)
  createdAt        DateTime           @default(now())
  PetInsuranceVet  PetInsuranceVet[]
  UserInsuranceVet UserInsuranceVet[]
}

model InsurancePolicies {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  policyNum        String?            @unique @db.VarChar(255)
  contact          String?            @db.VarChar(255)
  emergencyDetails String?            @db.VarChar(255)
  createdAt        DateTime           @default(now())
  PetInsuranceVet  PetInsuranceVet[]
  UserInsuranceVet UserInsuranceVet[]
}

model PetInsuranceVet {
  pet         Pets              @relation(fields: [petId], references: [id], onDelete: Cascade)
  petId       String            @unique @db.Uuid
  vet         Vets              @relation(fields: [vetId], references: [id], onDelete: Cascade)
  vetId       String            @unique @db.Uuid
  insurance   InsurancePolicies @relation(fields: [insuranceId], references: [id], onDelete: Cascade)
  insuranceId String            @unique @db.Uuid

  @@id([petId, vetId, insuranceId])
}

model UserInsuranceVet {
  user        Users             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String            @unique @db.Uuid
  vet         Vets              @relation(fields: [vetId], references: [id], onDelete: Cascade)
  vetId       String            @unique @db.Uuid
  insurance   InsurancePolicies @relation(fields: [insuranceId], references: [id], onDelete: Cascade)
  insuranceId String            @unique @db.Uuid

  @@id([userId, vetId, insuranceId])
}

model Users {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email            String             @unique @db.VarChar(255)
  username         String             @unique @db.VarChar(255)
  password         String             @unique @db.VarChar(255)
  createdAt        DateTime           @default(now())
  userInsuranceVet UserInsuranceVet[]
  pet              Pets[]
}

model Pets {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  petName         String            @db.VarChar(255)
  petType         String            @db.VarChar(255)
  gender          String?
  DOB             String?           @db.VarChar(255)
  createdAt       DateTime          @default(now())
  physicalChar    PhysicalChar?
  healthInfo      HealthInfo?
  diet            Diet?
  grooming        GrommingInfo?
  note            Notes[]
  PetInsuranceVet PetInsuranceVet[]
  user            Users             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String            @db.Uuid
}
